//===============================================
//
//  内容   ： 敵処理
//  File   ： enemy.h
//  制作者 ： 木崎　翔
//
//===============================================

//===============================================
// 
// 二重インクルード防止
// 
//===============================================
#ifndef _ENEMY_H_
#define _ENEMY_H_

//===============================================
//
//  インクルードファイル
//
//===============================================
#include "main.h"
#include "motion.h"

//===============================================
//
// マクロ定義
//
//===============================================
#define ENEMY_MAX			( 20 )

//------ 列挙型 ------
typedef enum
{
	MOVEPATTERN_A = 0,
	MOVEPATTERN_B,
	MOVEPATTERN_C,
	MOVEPATTERN_D,
	MOVEPATTERN_MAX
}MOVEPATTERN;

typedef enum
{
	ENEMYTYPE_RED = 0,
	ENEMYTYPE_YELLOW,
	ENEMYTYPE_BLUE,
	ENEMYTYPE_WHITE,
	ENEMYTYPE_MAX,
}ENEMYTYPE;

//===============================================
// 
// 構造体定義
// 
//===============================================
typedef struct
{
	bool bHitBullet;		// あたったかどうか（バレット関連）
	int nHitFrame;			// 当たった時の復帰フレームカウンター

	int nScore;				// 持ちスコア

	D3DXVECTOR3 move;		// 基本移動量
	bool bUse;				// 使用中かどうか

	ENEMYTYPE enemyType;			// 敵の種類

	MOVEPATTERN movePattern;	// 移動の種類
}ENEMY_STATUS;

//===============================================
//
//  関数プロトタイプ宣言
//
//===============================================

//===============================================
//
// モデルに関する初期化
//
//===============================================
void InitEnemy(void);	

//===============================================
//
// モデルに関する終了処理
//
//===============================================
void UninitEnemy(void);	

//===============================================
//
// モデルに関する更新処理
//
//===============================================
void UpdateEnemy(void);

//===============================================
//
// モデルに関する描画処理
//
//===============================================
void DrawEnemy(void);

//===============================================
//
// モデルの向きの慣性処理
//
//===============================================
void RotateEnemy(void);

//===============================================
//
// モデル構造体変数取得
//
//===============================================
void SetEnemy( ENEMYTYPE type, D3DXVECTOR3 pos );

//===============================================
//
// モデル構造体変数取得
//
//===============================================
MODEL_INFO *GetEnemyInfo(void);

//===============================================
//
// 当たり判定の情報を取得
//
//===============================================
COL_RECT *GetRectEnemy();

//===============================================
//
// 敵使用情報を取得
//
//===============================================
bool *GetEnemyUse( void );

//===============================================
//
// 当たった判定を取得
//
//===============================================
bool GetCollision( void );

//===============================================
//
// 当たった判定をセット
//
//===============================================
void SetCollision( bool set );

//===============================================
//
// タイトルでの更新処理
//
//===============================================
void UpdateEnemyTitle( void );

#endif

